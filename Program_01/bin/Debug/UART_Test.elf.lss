
bin\Debug\UART_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000666  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000666  000006fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  00800062  00800062  000006fc  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000d8  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004db  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e3  00000000  00000000  00000cef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e4  00000000  00000000  00000ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  000012b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d3  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1e c0       	rjmp	.+60     	; 0x3e <__ctors_end>
   2:	38 c0       	rjmp	.+112    	; 0x74 <__bad_interrupt>
   4:	37 c0       	rjmp	.+110    	; 0x74 <__bad_interrupt>
   6:	6e c2       	rjmp	.+1244   	; 0x4e4 <__vector_3>
   8:	35 c0       	rjmp	.+106    	; 0x74 <__bad_interrupt>
   a:	34 c0       	rjmp	.+104    	; 0x74 <__bad_interrupt>
   c:	33 c0       	rjmp	.+102    	; 0x74 <__bad_interrupt>
   e:	32 c0       	rjmp	.+100    	; 0x74 <__bad_interrupt>
  10:	31 c0       	rjmp	.+98     	; 0x74 <__bad_interrupt>
  12:	30 c0       	rjmp	.+96     	; 0x74 <__bad_interrupt>
  14:	2f c0       	rjmp	.+94     	; 0x74 <__bad_interrupt>
  16:	2f c0       	rjmp	.+94     	; 0x76 <__vector_11>
  18:	72 c0       	rjmp	.+228    	; 0xfe <__vector_12>
  1a:	2c c0       	rjmp	.+88     	; 0x74 <__bad_interrupt>
  1c:	8e c2       	rjmp	.+1308   	; 0x53a <__vector_14>
  1e:	2a c0       	rjmp	.+84     	; 0x74 <__bad_interrupt>
  20:	29 c0       	rjmp	.+82     	; 0x74 <__bad_interrupt>
  22:	28 c0       	rjmp	.+80     	; 0x74 <__bad_interrupt>
  24:	27 c0       	rjmp	.+78     	; 0x74 <__bad_interrupt>

00000026 <__c.1513>:
  26:	0a 0d 00                                            ...

00000029 <__c.1508>:
  29:	0a 0d 00                                            ...

0000002c <__c.1506>:
  2c:	3a 20 00                                            : .

0000002f <__c.1504>:
  2f:	48 65 6c 6c 6f 20 57 6f 72 6c 64 0a 0d 00 00        Hello World....

0000003e <__ctors_end>:
  3e:	11 24       	eor	r1, r1
  40:	1f be       	out	0x3f, r1	; 63
  42:	cf e5       	ldi	r28, 0x5F	; 95
  44:	d4 e0       	ldi	r29, 0x04	; 4
  46:	de bf       	out	0x3e, r29	; 62
  48:	cd bf       	out	0x3d, r28	; 61

0000004a <__do_copy_data>:
  4a:	10 e0       	ldi	r17, 0x00	; 0
  4c:	a0 e6       	ldi	r26, 0x60	; 96
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	e6 e6       	ldi	r30, 0x66	; 102
  52:	f6 e0       	ldi	r31, 0x06	; 6
  54:	02 c0       	rjmp	.+4      	; 0x5a <.do_copy_data_start>

00000056 <.do_copy_data_loop>:
  56:	05 90       	lpm	r0, Z+
  58:	0d 92       	st	X+, r0

0000005a <.do_copy_data_start>:
  5a:	a2 36       	cpi	r26, 0x62	; 98
  5c:	b1 07       	cpc	r27, r17
  5e:	d9 f7       	brne	.-10     	; 0x56 <.do_copy_data_loop>

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a2 e6       	ldi	r26, 0x62	; 98
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 39       	cpi	r26, 0x98	; 152
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	5a d1       	rcall	.+692    	; 0x326 <main>
  72:	f7 c2       	rjmp	.+1518   	; 0x662 <_exit>

00000074 <__bad_interrupt>:
  74:	c5 cf       	rjmp	.-118    	; 0x0 <__vectors>

00000076 <__vector_11>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  76:	1f 92       	push	r1
  78:	0f 92       	push	r0
  7a:	0f b6       	in	r0, 0x3f	; 63
  7c:	0f 92       	push	r0
  7e:	11 24       	eor	r1, r1
  80:	8f 93       	push	r24
  82:	9f 93       	push	r25
  84:	ef 93       	push	r30
  86:	ff 93       	push	r31
  88:	df 93       	push	r29
  8a:	cf 93       	push	r28
  8c:	00 d0       	rcall	.+0      	; 0x8e <__vector_11+0x18>
  8e:	00 d0       	rcall	.+0      	; 0x90 <__vector_11+0x1a>
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
  94:	eb e2       	ldi	r30, 0x2B	; 43
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8a 83       	std	Y+2, r24	; 0x02
    data = UART0_DATA;
  9c:	ec e2       	ldi	r30, 0x2C	; 44
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	8b 83       	std	Y+3, r24	; 0x03
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
  a4:	8a 81       	ldd	r24, Y+2	; 0x02
  a6:	88 71       	andi	r24, 0x18	; 24
  a8:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  aa:	80 91 84 00 	lds	r24, 0x0084
  ae:	8f 5f       	subi	r24, 0xFF	; 255
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	8c 83       	std	Y+4, r24	; 0x04
    
    if ( tmphead == UART_RxTail ) {
  b4:	90 91 85 00 	lds	r25, 0x0085
  b8:	8c 81       	ldd	r24, Y+4	; 0x04
  ba:	89 17       	cp	r24, r25
  bc:	19 f4       	brne	.+6      	; 0xc4 <__vector_11+0x4e>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	89 83       	std	Y+1, r24	; 0x01
  c2:	0b c0       	rjmp	.+22     	; 0xda <__vector_11+0x64>
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  c4:	8c 81       	ldd	r24, Y+4	; 0x04
  c6:	80 93 84 00 	sts	0x0084, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
  ca:	8c 81       	ldd	r24, Y+4	; 0x04
  cc:	88 2f       	mov	r24, r24
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	fc 01       	movw	r30, r24
  d2:	ee 58       	subi	r30, 0x8E	; 142
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
  d6:	8b 81       	ldd	r24, Y+3	; 0x03
  d8:	80 83       	st	Z, r24
    }
    UART_LastRxError = lastRxError;   
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	80 93 86 00 	sts	0x0086, r24
}
  e0:	0f 90       	pop	r0
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
  e6:	0f 90       	pop	r0
  e8:	cf 91       	pop	r28
  ea:	df 91       	pop	r29
  ec:	ff 91       	pop	r31
  ee:	ef 91       	pop	r30
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_12>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	af 93       	push	r26
 10e:	bf 93       	push	r27
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
 114:	df 93       	push	r29
 116:	cf 93       	push	r28
 118:	0f 92       	push	r0
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 11e:	90 91 82 00 	lds	r25, 0x0082
 122:	80 91 83 00 	lds	r24, 0x0083
 126:	98 17       	cp	r25, r24
 128:	99 f0       	breq	.+38     	; 0x150 <__vector_12+0x52>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 12a:	80 91 83 00 	lds	r24, 0x0083
 12e:	8f 5f       	subi	r24, 0xFF	; 255
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	89 83       	std	Y+1, r24	; 0x01
        UART_TxTail = tmptail;
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	80 93 83 00 	sts	0x0083, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 13a:	ac e2       	ldi	r26, 0x2C	; 44
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	88 2f       	mov	r24, r24
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	fc 01       	movw	r30, r24
 146:	ee 59       	subi	r30, 0x9E	; 158
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	80 81       	ld	r24, Z
 14c:	8c 93       	st	X, r24
 14e:	07 c0       	rjmp	.+14     	; 0x15e <__vector_12+0x60>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 150:	aa e2       	ldi	r26, 0x2A	; 42
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	ea e2       	ldi	r30, 0x2A	; 42
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	8f 7d       	andi	r24, 0xDF	; 223
 15c:	8c 93       	st	X, r24
    }
}
 15e:	0f 90       	pop	r0
 160:	cf 91       	pop	r28
 162:	df 91       	pop	r29
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	bf 91       	pop	r27
 16a:	af 91       	pop	r26
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 17a:	df 93       	push	r29
 17c:	cf 93       	push	r28
 17e:	00 d0       	rcall	.+0      	; 0x180 <uart_init+0x6>
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
 184:	9a 83       	std	Y+2, r25	; 0x02
 186:	89 83       	std	Y+1, r24	; 0x01
    UART_TxHead = 0;
 188:	10 92 82 00 	sts	0x0082, r1
    UART_TxTail = 0;
 18c:	10 92 83 00 	sts	0x0083, r1
    UART_RxHead = 0;
 190:	10 92 84 00 	sts	0x0084, r1
    UART_RxTail = 0;
 194:	10 92 85 00 	sts	0x0085, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	9a 81       	ldd	r25, Y+2	; 0x02
 19c:	99 23       	and	r25, r25
 19e:	4c f4       	brge	.+18     	; 0x1b2 <uart_init+0x38>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 1a0:	eb e2       	ldi	r30, 0x2B	; 43
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	80 83       	st	Z, r24
    	 baudrate &= ~0x8000;
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	9a 81       	ldd	r25, Y+2	; 0x02
 1ac:	9f 77       	andi	r25, 0x7F	; 127
 1ae:	9a 83       	std	Y+2, r25	; 0x02
 1b0:	89 83       	std	Y+1, r24	; 0x01
    }
    UBRRH = (unsigned char)(baudrate>>8);
 1b2:	e0 e4       	ldi	r30, 0x40	; 64
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ba:	89 2f       	mov	r24, r25
 1bc:	99 27       	eor	r25, r25
 1be:	80 83       	st	Z, r24
    UBRRL = (unsigned char) baudrate;
 1c0:	e9 e2       	ldi	r30, 0x29	; 41
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	80 83       	st	Z, r24
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 1c8:	ea e2       	ldi	r30, 0x2A	; 42
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	88 e9       	ldi	r24, 0x98	; 152
 1ce:	80 83       	st	Z, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 1d0:	e0 e4       	ldi	r30, 0x40	; 64
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	86 e8       	ldi	r24, 0x86	; 134
 1d6:	80 83       	st	Z, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	cf 91       	pop	r28
 1de:	df 91       	pop	r29
 1e0:	08 95       	ret

000001e2 <uart_getc>:
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
 1e2:	df 93       	push	r29
 1e4:	cf 93       	push	r28
 1e6:	00 d0       	rcall	.+0      	; 0x1e8 <uart_getc+0x6>
 1e8:	00 d0       	rcall	.+0      	; 0x1ea <uart_getc+0x8>
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 1ee:	90 91 84 00 	lds	r25, 0x0084
 1f2:	80 91 85 00 	lds	r24, 0x0085
 1f6:	98 17       	cp	r25, r24
 1f8:	29 f4       	brne	.+10     	; 0x204 <uart_getc+0x22>
        return UART_NO_DATA;   /* no data available */
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	9c 83       	std	Y+4, r25	; 0x04
 200:	8b 83       	std	Y+3, r24	; 0x03
 202:	1d c0       	rjmp	.+58     	; 0x23e <uart_getc+0x5c>
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 204:	80 91 85 00 	lds	r24, 0x0085
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	8f 70       	andi	r24, 0x0F	; 15
 20c:	8a 83       	std	Y+2, r24	; 0x02
    UART_RxTail = tmptail; 
 20e:	8a 81       	ldd	r24, Y+2	; 0x02
 210:	80 93 85 00 	sts	0x0085, r24
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 214:	8a 81       	ldd	r24, Y+2	; 0x02
 216:	88 2f       	mov	r24, r24
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	fc 01       	movw	r30, r24
 21c:	ee 58       	subi	r30, 0x8E	; 142
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	80 81       	ld	r24, Z
 222:	89 83       	std	Y+1, r24	; 0x01
    
    return (UART_LastRxError << 8) + data;
 224:	80 91 86 00 	lds	r24, 0x0086
 228:	88 2f       	mov	r24, r24
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	38 2f       	mov	r19, r24
 22e:	22 27       	eor	r18, r18
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	88 2f       	mov	r24, r24
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	82 0f       	add	r24, r18
 238:	93 1f       	adc	r25, r19
 23a:	9c 83       	std	Y+4, r25	; 0x04
 23c:	8b 83       	std	Y+3, r24	; 0x03
 23e:	8b 81       	ldd	r24, Y+3	; 0x03
 240:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	0f 90       	pop	r0
 24a:	cf 91       	pop	r28
 24c:	df 91       	pop	r29
 24e:	08 95       	ret

00000250 <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
 250:	df 93       	push	r29
 252:	cf 93       	push	r28
 254:	00 d0       	rcall	.+0      	; 0x256 <uart_putc+0x6>
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
 25a:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 25c:	80 91 82 00 	lds	r24, 0x0082
 260:	8f 5f       	subi	r24, 0xFF	; 255
 262:	8f 70       	andi	r24, 0x0F	; 15
 264:	89 83       	std	Y+1, r24	; 0x01
    
    while ( tmphead == UART_TxTail ){
 266:	90 91 83 00 	lds	r25, 0x0083
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	89 17       	cp	r24, r25
 26e:	d9 f3       	breq	.-10     	; 0x266 <uart_putc+0x16>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	88 2f       	mov	r24, r24
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	fc 01       	movw	r30, r24
 278:	ee 59       	subi	r30, 0x9E	; 158
 27a:	ff 4f       	sbci	r31, 0xFF	; 255
 27c:	8a 81       	ldd	r24, Y+2	; 0x02
 27e:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 280:	89 81       	ldd	r24, Y+1	; 0x01
 282:	80 93 82 00 	sts	0x0082, r24

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 286:	aa e2       	ldi	r26, 0x2A	; 42
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	ea e2       	ldi	r30, 0x2A	; 42
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	80 62       	ori	r24, 0x20	; 32
 292:	8c 93       	st	X, r24

}/* uart_putc */
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	cf 91       	pop	r28
 29a:	df 91       	pop	r29
 29c:	08 95       	ret

0000029e <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 29e:	df 93       	push	r29
 2a0:	cf 93       	push	r28
 2a2:	00 d0       	rcall	.+0      	; 0x2a4 <uart_puts+0x6>
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	9a 83       	std	Y+2, r25	; 0x02
 2aa:	89 83       	std	Y+1, r24	; 0x01
 2ac:	0b c0       	rjmp	.+22     	; 0x2c4 <uart_puts+0x26>
    while (*s) 
      uart_putc(*s++);
 2ae:	e9 81       	ldd	r30, Y+1	; 0x01
 2b0:	fa 81       	ldd	r31, Y+2	; 0x02
 2b2:	80 81       	ld	r24, Z
 2b4:	28 2f       	mov	r18, r24
 2b6:	89 81       	ldd	r24, Y+1	; 0x01
 2b8:	9a 81       	ldd	r25, Y+2	; 0x02
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	9a 83       	std	Y+2, r25	; 0x02
 2be:	89 83       	std	Y+1, r24	; 0x01
 2c0:	82 2f       	mov	r24, r18
 2c2:	c6 df       	rcall	.-116    	; 0x250 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 2c4:	e9 81       	ldd	r30, Y+1	; 0x01
 2c6:	fa 81       	ldd	r31, Y+2	; 0x02
 2c8:	80 81       	ld	r24, Z
 2ca:	88 23       	and	r24, r24
 2cc:	81 f7       	brne	.-32     	; 0x2ae <uart_puts+0x10>
      uart_putc(*s++);

}/* uart_puts */
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	cf 91       	pop	r28
 2d4:	df 91       	pop	r29
 2d6:	08 95       	ret

000002d8 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 2d8:	df 93       	push	r29
 2da:	cf 93       	push	r28
 2dc:	00 d0       	rcall	.+0      	; 0x2de <uart_puts_p+0x6>
 2de:	00 d0       	rcall	.+0      	; 0x2e0 <uart_puts_p+0x8>
 2e0:	00 d0       	rcall	.+0      	; 0x2e2 <uart_puts_p+0xa>
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
 2e6:	9d 83       	std	Y+5, r25	; 0x05
 2e8:	8c 83       	std	Y+4, r24	; 0x04
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <uart_puts_p+0x18>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
 2ec:	8e 81       	ldd	r24, Y+6	; 0x06
 2ee:	b0 df       	rcall	.-160    	; 0x250 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 2f0:	8c 81       	ldd	r24, Y+4	; 0x04
 2f2:	9d 81       	ldd	r25, Y+5	; 0x05
 2f4:	9b 83       	std	Y+3, r25	; 0x03
 2f6:	8a 83       	std	Y+2, r24	; 0x02
 2f8:	8c 81       	ldd	r24, Y+4	; 0x04
 2fa:	9d 81       	ldd	r25, Y+5	; 0x05
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	9d 83       	std	Y+5, r25	; 0x05
 300:	8c 83       	std	Y+4, r24	; 0x04
 302:	ea 81       	ldd	r30, Y+2	; 0x02
 304:	fb 81       	ldd	r31, Y+3	; 0x03
 306:	84 91       	lpm	r24, Z+
 308:	89 83       	std	Y+1, r24	; 0x01
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	8e 83       	std	Y+6, r24	; 0x06
 30e:	8e 81       	ldd	r24, Y+6	; 0x06
 310:	88 23       	and	r24, r24
 312:	61 f7       	brne	.-40     	; 0x2ec <uart_puts_p+0x14>
      uart_putc(c);

}/* uart_puts_p */
 314:	26 96       	adiw	r28, 0x06	; 6
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
 31a:	de bf       	out	0x3e, r29	; 62
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	cd bf       	out	0x3d, r28	; 61
 320:	cf 91       	pop	r28
 322:	df 91       	pop	r29
 324:	08 95       	ret

00000326 <main>:
volatile unsigned long millis;
volatile unsigned int sensors[6];
volatile unsigned char ADC_flag = 1;

int main(void)
{
 326:	df 93       	push	r29
 328:	cf 93       	push	r28
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
 32e:	a9 97       	sbiw	r28, 0x29	; 41
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	f8 94       	cli
 334:	de bf       	out	0x3e, r29	; 62
 336:	0f be       	out	0x3f, r0	; 63
 338:	cd bf       	out	0x3d, r28	; 61

    char millis_str[16] = "0";
 33a:	80 e3       	ldi	r24, 0x30	; 48
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	a0 e0       	ldi	r26, 0x00	; 0
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	8a 87       	std	Y+10, r24	; 0x0a
 344:	9b 87       	std	Y+11, r25	; 0x0b
 346:	ac 87       	std	Y+12, r26	; 0x0c
 348:	bd 87       	std	Y+13, r27	; 0x0d
 34a:	8c e0       	ldi	r24, 0x0C	; 12
 34c:	fe 01       	movw	r30, r28
 34e:	3e 96       	adiw	r30, 0x0e	; 14
 350:	df 01       	movw	r26, r30
 352:	98 2f       	mov	r25, r24
 354:	1d 92       	st	X+, r1
 356:	9a 95       	dec	r25
 358:	e9 f7       	brne	.-6      	; 0x354 <main+0x2e>
    char temp_str[16] = "0";
 35a:	80 e3       	ldi	r24, 0x30	; 48
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	a0 e0       	ldi	r26, 0x00	; 0
 360:	b0 e0       	ldi	r27, 0x00	; 0
 362:	8a 8f       	std	Y+26, r24	; 0x1a
 364:	9b 8f       	std	Y+27, r25	; 0x1b
 366:	ac 8f       	std	Y+28, r26	; 0x1c
 368:	bd 8f       	std	Y+29, r27	; 0x1d
 36a:	8c e0       	ldi	r24, 0x0C	; 12
 36c:	fe 01       	movw	r30, r28
 36e:	7e 96       	adiw	r30, 0x1e	; 30
 370:	df 01       	movw	r26, r30
 372:	98 2f       	mov	r25, r24
 374:	1d 92       	st	X+, r1
 376:	9a 95       	dec	r25
 378:	e9 f7       	brne	.-6      	; 0x374 <main+0x4e>
    unsigned long delay = 1000;
 37a:	88 ee       	ldi	r24, 0xE8	; 232
 37c:	93 e0       	ldi	r25, 0x03	; 3
 37e:	a0 e0       	ldi	r26, 0x00	; 0
 380:	b0 e0       	ldi	r27, 0x00	; 0
 382:	8e 83       	std	Y+6, r24	; 0x06
 384:	9f 83       	std	Y+7, r25	; 0x07
 386:	a8 87       	std	Y+8, r26	; 0x08
 388:	b9 87       	std	Y+9, r27	; 0x09
    unsigned long start_millis;
    unsigned char i = 0;
 38a:	19 82       	std	Y+1, r1	; 0x01


    //set LED pin as output and set it high
    STATUS_LED_DDR |= (1<<STATUS_LED);
 38c:	a7 e3       	ldi	r26, 0x37	; 55
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	e7 e3       	ldi	r30, 0x37	; 55
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	81 60       	ori	r24, 0x01	; 1
 398:	8c 93       	st	X, r24
    STATUS_LED_PORT |= (1<<STATUS_LED);
 39a:	a8 e3       	ldi	r26, 0x38	; 56
 39c:	b0 e0       	ldi	r27, 0x00	; 0
 39e:	e8 e3       	ldi	r30, 0x38	; 56
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	81 60       	ori	r24, 0x01	; 1
 3a6:	8c 93       	st	X, r24

    //UART initialization
    uart_init(UART_BAUD_SELECT(9600,F_CPU));
 3a8:	87 e6       	ldi	r24, 0x67	; 103
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	e6 de       	rcall	.-564    	; 0x17a <uart_init>

    //TIMER2 initialization ... CTC 1 ms, Prescaler 64
    TCCR2   = (1<<WGM21)|(0<<WGM20)|(1<<CS22)|(0<<CS21)|(0<<CS20); // normal CTC, OC2 disconnected, Prescaler CLK/64
 3ae:	e5 e4       	ldi	r30, 0x45	; 69
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	8c e0       	ldi	r24, 0x0C	; 12
 3b4:	80 83       	st	Z, r24
    OCR2    = 0xF9; // for 1 ms interrput
 3b6:	e3 e4       	ldi	r30, 0x43	; 67
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	89 ef       	ldi	r24, 0xF9	; 249
 3bc:	80 83       	st	Z, r24
    TIMSK   = (1<<OCIE2);
 3be:	e9 e5       	ldi	r30, 0x59	; 89
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 e8       	ldi	r24, 0x80	; 128
 3c4:	80 83       	st	Z, r24

    //ADC initialization
    ADMUX = (0<<REFS1)|(1<<REFS0)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0); // AVCC, Channel 0
 3c6:	e7 e2       	ldi	r30, 0x27	; 39
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 e4       	ldi	r24, 0x40	; 64
 3cc:	80 83       	st	Z, r24
    ADCSRA = (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); // En, Int. En.,  Division factor = 128 for 125KHz
 3ce:	e6 e2       	ldi	r30, 0x26	; 38
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	87 e0       	ldi	r24, 0x07	; 7
 3d4:	80 83       	st	Z, r24
    ADCSRA |= (1<<ADEN)|(1<<ADIE);
 3d6:	a6 e2       	ldi	r26, 0x26	; 38
 3d8:	b0 e0       	ldi	r27, 0x00	; 0
 3da:	e6 e2       	ldi	r30, 0x26	; 38
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	88 68       	ori	r24, 0x88	; 136
 3e2:	8c 93       	st	X, r24

    sei(); // set global interrupt
 3e4:	78 94       	sei

    ADCSRA |= (1<<ADSC);
 3e6:	a6 e2       	ldi	r26, 0x26	; 38
 3e8:	b0 e0       	ldi	r27, 0x00	; 0
 3ea:	e6 e2       	ldi	r30, 0x26	; 38
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	80 64       	ori	r24, 0x40	; 64
 3f2:	8c 93       	st	X, r24
    uart_puts_p(PSTR("Hello World\n\r"));
 3f4:	8f e2       	ldi	r24, 0x2F	; 47
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	6f df       	rcall	.-290    	; 0x2d8 <uart_puts_p>

    //_delay_ms(1000);

    start_millis = millis;
 3fa:	80 91 94 00 	lds	r24, 0x0094
 3fe:	90 91 95 00 	lds	r25, 0x0095
 402:	a0 91 96 00 	lds	r26, 0x0096
 406:	b0 91 97 00 	lds	r27, 0x0097
 40a:	8a 83       	std	Y+2, r24	; 0x02
 40c:	9b 83       	std	Y+3, r25	; 0x03
 40e:	ac 83       	std	Y+4, r26	; 0x04
 410:	bd 83       	std	Y+5, r27	; 0x05

    for(;;)
    {
        if( (millis - start_millis) == delay)
 412:	20 91 94 00 	lds	r18, 0x0094
 416:	30 91 95 00 	lds	r19, 0x0095
 41a:	40 91 96 00 	lds	r20, 0x0096
 41e:	50 91 97 00 	lds	r21, 0x0097
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	9b 81       	ldd	r25, Y+3	; 0x03
 426:	ac 81       	ldd	r26, Y+4	; 0x04
 428:	bd 81       	ldd	r27, Y+5	; 0x05
 42a:	28 1b       	sub	r18, r24
 42c:	39 0b       	sbc	r19, r25
 42e:	4a 0b       	sbc	r20, r26
 430:	5b 0b       	sbc	r21, r27
 432:	8e 81       	ldd	r24, Y+6	; 0x06
 434:	9f 81       	ldd	r25, Y+7	; 0x07
 436:	a8 85       	ldd	r26, Y+8	; 0x08
 438:	b9 85       	ldd	r27, Y+9	; 0x09
 43a:	28 17       	cp	r18, r24
 43c:	39 07       	cpc	r19, r25
 43e:	4a 07       	cpc	r20, r26
 440:	5b 07       	cpc	r21, r27
 442:	39 f7       	brne	.-50     	; 0x412 <main+0xec>
//            uart_puts_P("millis = ");
//            utoa(millis,millis_str,10);
//            uart_puts(millis_str);
//            uart_puts_P("\n\r");

            for (i = 0;i < 6 ;i++ )
 444:	19 82       	std	Y+1, r1	; 0x01
 446:	2a c0       	rjmp	.+84     	; 0x49c <__stack+0x3d>
            {
            	utoa(i,temp_str,10);
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	88 2f       	mov	r24, r24
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	9e 01       	movw	r18, r28
 450:	26 5e       	subi	r18, 0xE6	; 230
 452:	3f 4f       	sbci	r19, 0xFF	; 255
 454:	b9 01       	movw	r22, r18
 456:	4a e0       	ldi	r20, 0x0A	; 10
 458:	50 e0       	ldi	r21, 0x00	; 0
 45a:	cb d0       	rcall	.+406    	; 0x5f2 <utoa>
            	uart_puts(temp_str);
 45c:	ce 01       	movw	r24, r28
 45e:	4a 96       	adiw	r24, 0x1a	; 26
 460:	1e df       	rcall	.-452    	; 0x29e <uart_puts>
            	uart_puts_p(PSTR(": "));
 462:	8c e2       	ldi	r24, 0x2C	; 44
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	38 df       	rcall	.-400    	; 0x2d8 <uart_puts_p>
            	utoa(sensors[i],temp_str,10);
 468:	89 81       	ldd	r24, Y+1	; 0x01
 46a:	88 2f       	mov	r24, r24
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	fc 01       	movw	r30, r24
 474:	e8 57       	subi	r30, 0x78	; 120
 476:	ff 4f       	sbci	r31, 0xFF	; 255
 478:	80 81       	ld	r24, Z
 47a:	91 81       	ldd	r25, Z+1	; 0x01
 47c:	9e 01       	movw	r18, r28
 47e:	26 5e       	subi	r18, 0xE6	; 230
 480:	3f 4f       	sbci	r19, 0xFF	; 255
 482:	b9 01       	movw	r22, r18
 484:	4a e0       	ldi	r20, 0x0A	; 10
 486:	50 e0       	ldi	r21, 0x00	; 0
 488:	b4 d0       	rcall	.+360    	; 0x5f2 <utoa>
            	uart_puts(temp_str);
 48a:	ce 01       	movw	r24, r28
 48c:	4a 96       	adiw	r24, 0x1a	; 26
 48e:	07 df       	rcall	.-498    	; 0x29e <uart_puts>
            	uart_puts_p(PSTR("\n\r"));
 490:	89 e2       	ldi	r24, 0x29	; 41
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	21 df       	rcall	.-446    	; 0x2d8 <uart_puts_p>
//            uart_puts_P("millis = ");
//            utoa(millis,millis_str,10);
//            uart_puts(millis_str);
//            uart_puts_P("\n\r");

            for (i = 0;i < 6 ;i++ )
 496:	89 81       	ldd	r24, Y+1	; 0x01
 498:	8f 5f       	subi	r24, 0xFF	; 255
 49a:	89 83       	std	Y+1, r24	; 0x01
 49c:	89 81       	ldd	r24, Y+1	; 0x01
 49e:	86 30       	cpi	r24, 0x06	; 6
 4a0:	98 f2       	brcs	.-90     	; 0x448 <main+0x122>
            	utoa(sensors[i],temp_str,10);
            	uart_puts(temp_str);
            	uart_puts_p(PSTR("\n\r"));
            }

            uart_puts_p(PSTR("\n\r"));
 4a2:	86 e2       	ldi	r24, 0x26	; 38
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	18 df       	rcall	.-464    	; 0x2d8 <uart_puts_p>


            start_millis = millis;
 4a8:	80 91 94 00 	lds	r24, 0x0094
 4ac:	90 91 95 00 	lds	r25, 0x0095
 4b0:	a0 91 96 00 	lds	r26, 0x0096
 4b4:	b0 91 97 00 	lds	r27, 0x0097
 4b8:	8a 83       	std	Y+2, r24	; 0x02
 4ba:	9b 83       	std	Y+3, r25	; 0x03
 4bc:	ac 83       	std	Y+4, r26	; 0x04
 4be:	bd 83       	std	Y+5, r27	; 0x05
            //TOGGLE_LED();
            ADC_flag = 1;
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	80 93 60 00 	sts	0x0060, r24
            ADCSRA |= (1<<ADSC);
 4c6:	a6 e2       	ldi	r26, 0x26	; 38
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	e6 e2       	ldi	r30, 0x26	; 38
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	80 64       	ori	r24, 0x40	; 64
 4d2:	8c 93       	st	X, r24
            CLEAR_LED();
 4d4:	a8 e3       	ldi	r26, 0x38	; 56
 4d6:	b0 e0       	ldi	r27, 0x00	; 0
 4d8:	e8 e3       	ldi	r30, 0x38	; 56
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	8e 7f       	andi	r24, 0xFE	; 254
 4e0:	8c 93       	st	X, r24
 4e2:	97 cf       	rjmp	.-210    	; 0x412 <main+0xec>

000004e4 <__vector_3>:

    return 0;
}

ISR(TIMER2_COMP_vect)
{
 4e4:	1f 92       	push	r1
 4e6:	0f 92       	push	r0
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	0f 92       	push	r0
 4ec:	11 24       	eor	r1, r1
 4ee:	8f 93       	push	r24
 4f0:	9f 93       	push	r25
 4f2:	af 93       	push	r26
 4f4:	bf 93       	push	r27
 4f6:	df 93       	push	r29
 4f8:	cf 93       	push	r28
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
    //micros++;
    millis++;
 4fe:	80 91 94 00 	lds	r24, 0x0094
 502:	90 91 95 00 	lds	r25, 0x0095
 506:	a0 91 96 00 	lds	r26, 0x0096
 50a:	b0 91 97 00 	lds	r27, 0x0097
 50e:	01 96       	adiw	r24, 0x01	; 1
 510:	a1 1d       	adc	r26, r1
 512:	b1 1d       	adc	r27, r1
 514:	80 93 94 00 	sts	0x0094, r24
 518:	90 93 95 00 	sts	0x0095, r25
 51c:	a0 93 96 00 	sts	0x0096, r26
 520:	b0 93 97 00 	sts	0x0097, r27
//    {
//        TOGGLE_LED();
//        millis = 0;
//    }

}
 524:	cf 91       	pop	r28
 526:	df 91       	pop	r29
 528:	bf 91       	pop	r27
 52a:	af 91       	pop	r26
 52c:	9f 91       	pop	r25
 52e:	8f 91       	pop	r24
 530:	0f 90       	pop	r0
 532:	0f be       	out	0x3f, r0	; 63
 534:	0f 90       	pop	r0
 536:	1f 90       	pop	r1
 538:	18 95       	reti

0000053a <__vector_14>:

ISR(ADC_vect)
{
 53a:	1f 92       	push	r1
 53c:	0f 92       	push	r0
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	0f 92       	push	r0
 542:	11 24       	eor	r1, r1
 544:	2f 93       	push	r18
 546:	3f 93       	push	r19
 548:	4f 93       	push	r20
 54a:	8f 93       	push	r24
 54c:	9f 93       	push	r25
 54e:	af 93       	push	r26
 550:	bf 93       	push	r27
 552:	ef 93       	push	r30
 554:	ff 93       	push	r31
 556:	df 93       	push	r29
 558:	cf 93       	push	r28
 55a:	0f 92       	push	r0
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
    static unsigned char i = 0;
    unsigned char temp;

    if(ADC_flag == 1)
 560:	80 91 60 00 	lds	r24, 0x0060
 564:	81 30       	cpi	r24, 0x01	; 1
 566:	29 f5       	brne	.+74     	; 0x5b2 <__vector_14+0x78>
    {
        sensors[i++] = ADC;
 568:	40 91 87 00 	lds	r20, 0x0087
 56c:	84 2f       	mov	r24, r20
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	e4 e2       	ldi	r30, 0x24	; 36
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	20 81       	ld	r18, Z
 576:	31 81       	ldd	r19, Z+1	; 0x01
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	fc 01       	movw	r30, r24
 57e:	e8 57       	subi	r30, 0x78	; 120
 580:	ff 4f       	sbci	r31, 0xFF	; 255
 582:	31 83       	std	Z+1, r19	; 0x01
 584:	20 83       	st	Z, r18
 586:	84 2f       	mov	r24, r20
 588:	8f 5f       	subi	r24, 0xFF	; 255
 58a:	80 93 87 00 	sts	0x0087, r24
        ADMUX = (ADMUX&0xF0)|i;
 58e:	a7 e2       	ldi	r26, 0x27	; 39
 590:	b0 e0       	ldi	r27, 0x00	; 0
 592:	e7 e2       	ldi	r30, 0x27	; 39
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	98 2f       	mov	r25, r24
 59a:	90 7f       	andi	r25, 0xF0	; 240
 59c:	80 91 87 00 	lds	r24, 0x0087
 5a0:	89 2b       	or	r24, r25
 5a2:	8c 93       	st	X, r24
        ADCSRA |= (1<<ADSC);
 5a4:	a6 e2       	ldi	r26, 0x26	; 38
 5a6:	b0 e0       	ldi	r27, 0x00	; 0
 5a8:	e6 e2       	ldi	r30, 0x26	; 38
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	80 81       	ld	r24, Z
 5ae:	80 64       	ori	r24, 0x40	; 64
 5b0:	8c 93       	st	X, r24
    }


    if(i > 5)
 5b2:	80 91 87 00 	lds	r24, 0x0087
 5b6:	86 30       	cpi	r24, 0x06	; 6
 5b8:	20 f0       	brcs	.+8      	; 0x5c2 <__vector_14+0x88>
    {
        i = 0;
 5ba:	10 92 87 00 	sts	0x0087, r1
        ADC_flag = 0;
 5be:	10 92 60 00 	sts	0x0060, r1
    }
    SET_LED();
 5c2:	a8 e3       	ldi	r26, 0x38	; 56
 5c4:	b0 e0       	ldi	r27, 0x00	; 0
 5c6:	e8 e3       	ldi	r30, 0x38	; 56
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	81 60       	ori	r24, 0x01	; 1
 5ce:	8c 93       	st	X, r24

}
 5d0:	0f 90       	pop	r0
 5d2:	cf 91       	pop	r28
 5d4:	df 91       	pop	r29
 5d6:	ff 91       	pop	r31
 5d8:	ef 91       	pop	r30
 5da:	bf 91       	pop	r27
 5dc:	af 91       	pop	r26
 5de:	9f 91       	pop	r25
 5e0:	8f 91       	pop	r24
 5e2:	4f 91       	pop	r20
 5e4:	3f 91       	pop	r19
 5e6:	2f 91       	pop	r18
 5e8:	0f 90       	pop	r0
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	0f 90       	pop	r0
 5ee:	1f 90       	pop	r1
 5f0:	18 95       	reti

000005f2 <utoa>:
 5f2:	fb 01       	movw	r30, r22
 5f4:	9f 01       	movw	r18, r30
 5f6:	42 30       	cpi	r20, 0x02	; 2
 5f8:	6c f0       	brlt	.+26     	; 0x614 <utoa+0x22>
 5fa:	45 32       	cpi	r20, 0x25	; 37
 5fc:	5c f4       	brge	.+22     	; 0x614 <utoa+0x22>
 5fe:	64 2f       	mov	r22, r20
 600:	77 27       	eor	r23, r23
 602:	1b d0       	rcall	.+54     	; 0x63a <__udivmodhi4>
 604:	80 5d       	subi	r24, 0xD0	; 208
 606:	8a 33       	cpi	r24, 0x3A	; 58
 608:	0c f0       	brlt	.+2      	; 0x60c <utoa+0x1a>
 60a:	89 5d       	subi	r24, 0xD9	; 217
 60c:	81 93       	st	Z+, r24
 60e:	cb 01       	movw	r24, r22
 610:	00 97       	sbiw	r24, 0x00	; 0
 612:	a9 f7       	brne	.-22     	; 0x5fe <utoa+0xc>
 614:	10 82       	st	Z, r1
 616:	c9 01       	movw	r24, r18
 618:	00 c0       	rjmp	.+0      	; 0x61a <strrev>

0000061a <strrev>:
 61a:	dc 01       	movw	r26, r24
 61c:	fc 01       	movw	r30, r24
 61e:	67 2f       	mov	r22, r23
 620:	71 91       	ld	r23, Z+
 622:	77 23       	and	r23, r23
 624:	e1 f7       	brne	.-8      	; 0x61e <strrev+0x4>
 626:	32 97       	sbiw	r30, 0x02	; 2
 628:	04 c0       	rjmp	.+8      	; 0x632 <strrev+0x18>
 62a:	7c 91       	ld	r23, X
 62c:	6d 93       	st	X+, r22
 62e:	70 83       	st	Z, r23
 630:	62 91       	ld	r22, -Z
 632:	ae 17       	cp	r26, r30
 634:	bf 07       	cpc	r27, r31
 636:	c8 f3       	brcs	.-14     	; 0x62a <strrev+0x10>
 638:	08 95       	ret

0000063a <__udivmodhi4>:
 63a:	aa 1b       	sub	r26, r26
 63c:	bb 1b       	sub	r27, r27
 63e:	51 e1       	ldi	r21, 0x11	; 17
 640:	07 c0       	rjmp	.+14     	; 0x650 <__udivmodhi4_ep>

00000642 <__udivmodhi4_loop>:
 642:	aa 1f       	adc	r26, r26
 644:	bb 1f       	adc	r27, r27
 646:	a6 17       	cp	r26, r22
 648:	b7 07       	cpc	r27, r23
 64a:	10 f0       	brcs	.+4      	; 0x650 <__udivmodhi4_ep>
 64c:	a6 1b       	sub	r26, r22
 64e:	b7 0b       	sbc	r27, r23

00000650 <__udivmodhi4_ep>:
 650:	88 1f       	adc	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	5a 95       	dec	r21
 656:	a9 f7       	brne	.-22     	; 0x642 <__udivmodhi4_loop>
 658:	80 95       	com	r24
 65a:	90 95       	com	r25
 65c:	bc 01       	movw	r22, r24
 65e:	cd 01       	movw	r24, r26
 660:	08 95       	ret

00000662 <_exit>:
 662:	f8 94       	cli

00000664 <__stop_program>:
 664:	ff cf       	rjmp	.-2      	; 0x664 <__stop_program>
